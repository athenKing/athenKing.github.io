---
layout: post
title:  "OT & PSI"
date:   2019-08-15 12:38:34 +0800
categories: academic
---

# Engineering part of libOTe
To make vs code works for detecting including path in c/c++ extension gui, set
	"includePath": [
	                "/usr/include",
	                "/usr/local/include",
	                "${env:PYTHON_LIB_TENSORFLOW}/include/",
	                "${env:PYTHON_LIB_TENSORFLOW}/include/external/nsync/public",
	                "${workspaceRoot}"
	            
	 }

Trying to figure out difference between Arithmetic & Bool & Yao of [ABY Framwork][ABY Link].


## Paper lists  regarding engineering of MPC
	* ABY – A Framework for Efficient Mixed-Protocol Secure Two-Party Computation_( From the paper [DSZ15][DSZ15 link])
	* **Thomas Schneider** famous doctoral paper: Engineering Secure Two-Party Computation Protocols

Paper Names | Amateur review  | Valuable parts  | unknown or what being too hard
--------------|:-----:|-----:| ----
Secure Two-Party Computation is Practical | The author improve secure computation under malicious adversary. Feasible AES computation under malicious adversary. A protocol with security under covert adversary |   |    
Engineering Secure Two-Party Computation Protocols |  |  -- |   
Efficient Oblivious Transfer Protocols(Naor Pinkas OT)  | using C/PK_0 technique and random oracle, successfully constructing a efficient OT(1,N) | one by one improvement in protocols| implementing distance from reality  
OT: The Simplest Protocol for Oblivious Transfer| | | 
IKNP protocl: Extending Oblivious Transfers Efficiently| | | 


## Definition of OT
Oblivious Transfer (OT) is a cryptographic primitive defined as follows: in its simplest flavour, 1-out-of-2 OT, a sender has two input messages M0 and M1 and a receiver has a choice bit c. At the end of the protocol the receiver is supposed to learn the message Mc and nothing else, while the sender is supposed to learn nothing.

## Applicaitons of OT
* Serves as a fundamental cryptographic primitive for secure 2-party computation
* garbled circuit private key retrieval
* private information retrieval
* GMW protocol [O. Goldreich, S. Micali and A. Wigderson. How to play any mental game – A completeness theorem for protocols with honest majority. In 19th STOC, 218–229, 1987.]


## Concrete implementations of OT
Different OTs are implemented from different papers:
*  Naor-Pinkas [M. Naor, B. Pinkas: Efficient oblivious transfer protocols. SODA 2001: 448-457]
*  Peikert-Vaikuntanathan-Waters [C. Peikert, V. Vaikuntanathan, B. Waters: A Framework for Efficient and Composable Oblivious Transfer. CRYPTO 2008: 554-571] 
*  Chou-Orlandi [T. Chou, C. Orlandi: The Simplest Protocol for Oblivious Transfer] ![diagram](/assets/simplest_OT.png)

### Explore the simplest OT protocol

Follow the [LibOTe][LibOTe Link], and to compatiate with ABY and libOTE,then I need to degrade boost to version 1.69.0 ,so trying compatiency with boost 1.70.0 <**But it turns out these 2 versions are compatiable**>

	cmake . -DENABLE_NASM=OFF -DENABLE_SIMPLESTOT=ON

but when ENABLE_SIMPLESTOT is switched on, I encountered "SimplestOT/fe25519_nsquare.s:503:1: error: 32-bit absolute addressing is not supported in 64-bit mode" issue, this being too techincal for me to solve. So I have to go back to test the other base OT protocols.

### Explore IKNP OT(Not base OT)

This seems to be an extention of OT, it could convert a large scale of OTs to a smaller OTs, 

Related work & Basic idea & Refined idea & Security proof 


What's the essece of code implementation of secure computation? 
	The author's knowledge of every protocol and a few programming skill and engineering technique.

	What kind of usage does it have? Two news,bad or good news every time,Use OT transfer to fetch message

And how do we learn them?

### Explore Naor-Pinkas OT(Not base OT)![naorpinkas](/assets/noar_pinkas_0.png)
Improved efficiency of applications
Provided that first two round of OT doesn't rely on random oracle model

processing engineering issues:
	when compile my own pure project, found that ecc lib is not enabled,
	so begin to rely on miracl library firstly,but unsuccessful, 
	then forward to rely on relics library, firstly relic is compiled, then in cmakelists command it to rely on the built library.
	Then go forward to install into system path, and things worked alright.
	New errors when making a pure target, meeting with various errors,so finally abort this task.

	Finally under the old framework, combing cryptotools and librelic constructed this ot transfer successfully, but got probability running with some errors.


## Efficiency comparaion of the aforementioned OTS <fill sender and receiver with long bitlen>






Then we proceed to OT techinical details.

[DSZ15 link]: localhost://../summerlearning/
[ABY Link]: https://github.com/encryptogroup/ABY
[LibOTe Link]: https://github.com/osu-crypto/libOTe
